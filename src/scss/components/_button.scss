@use "sass:map";
@use "sass:math";
@use "../theme";
@use "../utilities/mixins";
@use "../utilities/elevation";
@use "../utilities/typography";
@use "../utilities/colors";
@use "../utilities/functions";
/// HOW TO USE THE BUTTON COMPONENT SAMPLE/EXAMPLE
///
/// - There are 3 button style variants namely 'text', 'outlined', 'contained'
///
/// 1. Text buttons are typically used for less important actions
/// 2. Outlined buttons are used for more emphasis than text buttons due to
///   the stroke
/// 3. Contained buttons have more emphasis, as they use a color fill and
///   shadow. They come with 2 styles, 'unelevated' and 'raised' where the
///   'raised' style is similar to the 'unelevated' one but with a elevation
///   depicting shadow
///
/// - All button variants allows icons and svgs if available in project
///
/// - TEXT BUTTON:
///     <button class="button">
///       <span class="button__label">default</span>
///     </button>
///
///
/// - OUTLINED BUTTON:
///     <button class="button button--outlined">
///       <span class="button__label">default</span>
///     </button>
///
///
/// - UNELEVATED BUTTON:
///     <button class="button button--unelevated">
///       <span class="button__label">default</span>
///     </button>
///
///
/// - RAISED BUTTON:
///     <button class="button button--raised">
///       <span class="button__label">default</span>
///     </button>
///

/// DEFAULT BUTTON THEME SCHEMA MAP
///
/// Use this map as a template for theming the button component on a particular theme
/// Simply add the map to the theme map in the theme file (src/scss/themes/theme-name.scss) and
/// change key:value where needed and remove key:value not needed for the theme version of that map
///
///
/// @access public
/// @group button
/// @type map
$button: (
  "default-btn-font-family": "Nunito",
  "default-btn-font-style": "xl-button",
  "default-btn-padding": functions.px-to-rem(8px),
  "default-btn-height": functions.px-to-rem(40px),
  "default-btn-border-radius": functions.px-to-rem(4px),
  "default-btn-icon-spacing": functions.px-to-rem(8px),
  "default-btn-color": map.get(colors.$colors, "neutral", "900"),
  "default-btn-background-color": transparent,
  "default-btn-hover-color": map.get(colors.$colors, "neutral", "900"),
  "default-btn-hover-background-color":
    map.get(colors.$colors, "neutral", "200"),
  "default-btn-focus-color": map.get(colors.$colors, "neutral", "900"),
  "default-btn-focus-background-color":
    map.get(colors.$colors, "neutral", "400"),
  "default-btn-selected-color": map.get(colors.$colors, "neutral", "900"),
  "default-btn-selected-background-color":
    map.get(colors.$colors, "neutral", "300"),
  "default-btn-disabled-color": map.get(colors.$colors, "neutral", "400"),
  "default-btn-disabled-background-color":
    map.get(colors.$colors, "neutral", "200"),
  "default-btn-transition": (
    background-color 50ms ease,
  ),
  "outlined-btn-padding": (
    0 (functions.px-to-rem(1px) - functions.px-to-rem(16px)) 0
      (functions.px-to-rem(1px) - functions.px-to-rem(16px)),
  ),
  "outlined-btn-border-width": functions.px-to-rem(1px),
  "outlined-btn-border-style": solid,
  "outlined-btn-border-color": map.get(colors.$colors, "neutral", "400"),
  "contained-btn-padding": (
    0 functions.px-to-rem(16px) 0 functions.px-to-rem(16px),
  ),
  "contained-btn-icon-spacing": functions.px-to-rem(8px),
  "contained-btn-icon-spacing-negative": (
    -1 * functions.px-to-rem(4px),
  ),
  "contained-btn-color": map.get(colors.$colors, "neutral", "50"),
  "contained-btn-background-color": map.get(colors.$colors, "neutral", "600"),
  "contained-btn-hover-color": map.get(colors.$colors, "neutral", "50"),
  "contained-btn-hover-background-color":
    map.get(colors.$colors, "neutral", "700"),
  "contained-btn-focus-color": map.get(colors.$colors, "neutral", "50"),
  "contained-btn-focus-background-color":
    map.get(colors.$colors, "neutral", "900"),
  "contained-btn-selected-color": map.get(colors.$colors, "neutral", "50"),
  "contained-btn-selected-background-color":
    map.get(colors.$colors, "neutral", "800"),
  "raised-btn-box-shadow-transition": (
    box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1),
  ),
  "raised-btn-box-shadow": map.get(elevation.$elevation, "2"),
  "raised-btn-box-shadow-hover-focus": map.get(elevation.$elevation, "8"),
  "raised-btn-box-shadow-active": map.get(elevation.$elevation, "8"),
  "raised-btn-box-shadow-disabled": map.get(elevation.$elevation, "0"),
);

/// CORE BUTTON STYLES
///
.button {
  box-sizing: border-box;
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  min-width: functions.px-to-rem(64px);
  margin-top: functions.px-to-rem(6px);
  margin-bottom: functions.px-to-rem(6px);
  border: none;
  outline: none;
  appearance: none;
  overflow: visible;
  vertical-align: middle;
  -webkit-tap-highlight-color: transparent;
  background-color: transparent;
  overflow: hidden;
  white-space: nowrap;

  &:hover {
    cursor: pointer;
  }

  &:active {
    outline: none;
  }

  &:disabled {
    background-color: transparent;
    cursor: not-allowed;
    pointer-events: none;
  }

  &__icon {
    margin-left: 0;
    display: inherit;
  }
}

a.button:not([href]) {
  background-color: transparent;
  cursor: not-allowed;
  pointer-events: none;
}

.button__label + .button__icon {
  margin-right: 0;
}

.button__icon > svg {
  fill: currentColor;
}

[dir="rtl"] .button__icon,
.button__icon[dir="rtl"] {
  margin-right: 0;
}

[dir="rtl"] .button__label + .button__icon,
.button__label + .button__icon[dir="rtl"] {
  margin-left: 0;
}

/// this mixin is used to build themable css properties of the button component
///
/// @access private
/// @group button
/// @param $button - is a map that contain the sample schema of the default button theme map or a themed version of it
///
@mixin theme-button($button) {
  .button {
    padding-left: map.get($button, "default-btn-padding");
    padding-right: map.get($button, "default-btn-padding");
    @if map.get($button, "default-btn-font-family") and
      map.get($button, "default-btn-font-style")
    {
      @include mixins.create-typography-properties-only(
        map.get($button, "default-btn-font-family"),
        map.get($button, "default-btn-font-style")
      );
    }
    height: map.get($button, "default-btn-height");
    border-radius: map.get($button, "default-btn-border-radius");
    color: map.get($button, "default-btn-color");
    transition: map.get($button, "default-btn-transition");
    &:hover {
      color: map.get($button, "default-btn-hover-color");
      background-color: map.get($button, "default-btn-hover-background-color");
    }
    &:focus {
      color: map.get($button, "default-btn-focus-color");
      background-color: map.get($button, "default-btn-focus-background-color");
    }
    &:focus:hover {
      color: map.get($button, "default-btn-selected-color");
      background-color: map.get(
        $button,
        "default-btn-selected-background-color"
      );
    }
    &:disabled {
      color: map.get($button, "default-btn-disabled-color");
    }
    &__icon {
      margin-right: map.get($button, "default-btn-icon-spacing");
    }
  }

  a.button:not([href]) {
    color: map.get($button, "default-btn-disabled-color");
  }

  .button__label + .button__icon {
    margin-left: map.get($button, "default-btn-icon-spacing");
  }

  [dir="rtl"] .button__icon,
  .button__icon[dir="rtl"] {
    margin-left: map.get($button, "default-btn-icon-spacing");
  }

  [dir="rtl"] .button__label + .button__icon,
  .button__label + .button__icon[dir="rtl"] {
    margin-right: map.get($button, "default-btn-icon-spacing");
  }

  .button--outlined {
    padding: map.get($button, "outlined-btn-padding");
    border-style: map.get($button, "outlined-btn-border-style");
    border-width: map.get($button, "outlined-btn-border-width");
    border-color: map.get($button, "outlined-btn-border-color");
    &:disabled {
      border-color: map.get($button, "default-btn-disabled-background-color");
    }
  }

  a.button--outlined:not([href]) {
    border-color: map.get($button, "default-btn-disabled-background-color");
  }

  .button--raised,
  .button--unelevated {
    padding: map.get($button, "contained-btn-padding");
    color: map.get($button, "contained-btn-color");
    background-color: map.get($button, "contained-btn-background-color");
    &:hover {
      color: map.get($button, "contained-btn-hover-color");
      background-color: map.get(
        $button,
        "contained-btn-hover-background-color"
      );
    }
    &:focus {
      color: map.get($button, "contained-btn-focus-color");
      background-color: map.get(
        $button,
        "contained-btn-focus-background-color"
      );
    }
    &:focus:hover {
      color: map.get($button, "contained-btn-selected-color");
      background-color: map.get(
        $button,
        "contained-btn-selected-background-color"
      );
    }
    &:disabled {
      background-color: map.get(
        $button,
        "default-btn-disabled-background-color"
      );
      color: map.get($button, "default-btn-disabled-color");
    }
  }

  a.button--raised:not([href]),
  a.button--unelevated:not([href]) {
    background-color: map.get($button, "default-btn-disabled-background-color");
    color: map.get($button, "default-btn-disabled-color");
  }

  .button--raised {
    box-shadow: map.get($button, "raised-btn-box-shadow");
    transition: map.get($button, "raised-btn-box-shadow-transition");
    &:hover,
    &:focus {
      box-shadow: map.get($button, "raised-btn-box-shadow-hover-focus");
    }
    &:active {
      box-shadow: map.get($button, "raised-btn-box-shadow-active");
    }
    &:disabled {
      box-shadow: map.get($button, "raised-btn-box-shadow-disabled");
    }
  }

  a.button--raised:not([href]) {
    box-shadow: map.get($button, "raised-btn-box-shadow-disabled");
  }

  .button--raised,
  .button--unelevated,
  .button--outlined {
    & .button__icon {
      margin-left: map.get($button, "contained-btn-icon-spacing-negative");
      margin-right: map.get($button, "contained-btn-icon-spacing");
    }
    & .button__icon[dir="rtl"] {
      margin-left: map.get($button, "contained-btn-icon-spacing");
      margin-right: map.get($button, "contained-btn-icon-spacing-negative");
    }
    & .button__label + .button__icon {
      margin-left: map.get($button, "contained-btn-icon-spacing");
      margin-right: map.get($button, "contained-btn-icon-spacing-negative");
    }
    & .button__label + .button__icon[dir="rtl"] {
      margin-left: map.get($button, "contained-btn-icon-spacing-negative");
      margin-right: map.get($button, "contained-btn-icon-spacing");
    }
  }

  [dir="rtl"] .button--raised,
  [dir="rtl"] .button--unelevated,
  [dir="rtl"] .button--outlined {
    & .button__icon {
      margin-left: map.get($button, "contained-btn-icon-spacing");
      margin-right: map.get($button, "contained-btn-icon-spacing-negative");
    }
    & .button__label + .button__icon {
      margin-left: map.get($button, "contained-btn-icon-spacing-negative");
      margin-right: map.get($button, "contained-btn-icon-spacing");
    }
  }
}

/// GENERATE THEME STYLES FOR BUTTON COMPONENT

/// GENERATE DEFAULT STYLES
@include theme-button($button);

/// GENERATE THEME STYLES
@include mixins.themify-component(theme.$themes, "button", $button) using
  ($schema) {
  @include theme-button($schema);
}
